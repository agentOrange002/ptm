package sys.app.ptm;
///****
import java.util.Arrays;
import java.util.Collection;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import lombok.AllArgsConstructor;
import sys.app.ptm.entity.AuthorityEntity;
import sys.app.ptm.entity.RoleEntity;
import sys.app.ptm.entity.UserEntity;
import sys.app.ptm.enums.Roles;
import sys.app.ptm.repository.AuthorityRepository;
import sys.app.ptm.repository.RoleRepository;
import sys.app.ptm.repository.UserRepository;
import sys.app.ptm.utility.Utility;

@AllArgsConstructor
@Component
@Transactional
public class InitialSetup {
	
	private UserRepository userRepository;
	private AuthorityRepository authorityRepository;
	private RoleRepository roleRepository;
	private Utility utility;
	private BCryptPasswordEncoder encoder;

	@EventListener 
	@Transactional 
	public void onApplicationEvent(ApplicationReadyEvent event) {
 
		
		AuthorityEntity a1 = createAuthority("DASHBOARD"); 
		AuthorityEntity a2 = createAuthority("REPORTS"); 
		AuthorityEntity a3 = createAuthority("MEMBER_REGISTER"); 
		AuthorityEntity a4 = createAuthority("BOARD_REGISTER"); 
		AuthorityEntity a5 = createAuthority("CATEGORY_REGISTER"); 
		AuthorityEntity a6 = createAuthority("MEMBER_MAINTENANCE"); 
		AuthorityEntity a7 = createAuthority("BOARD_MAINTENANCE"); 
		AuthorityEntity a8 = createAuthority("CATEGORY_MAINTENANCE");
		AuthorityEntity a9 = createAuthority("ADMINISTRATION");
		AuthorityEntity a10 = createAuthority("DASHBOARD_CHART");
		AuthorityEntity a11 = createAuthority("REPORT_BOARD");
		AuthorityEntity a12 = createAuthority("REPORT_MEMBER");	
		AuthorityEntity a13 = createAuthority("CATEGORY_GETBY_CATEGORYID");
		AuthorityEntity a14 = createAuthority("CATEGORY_ALL");
		
		AuthorityEntity i = createAuthority("ADMINISTRATION");
		AuthorityEntity i = createAuthority("ADMINISTRATION");
		AuthorityEntity i = createAuthority("ADMINISTRATION");
		AuthorityEntity i = createAuthority("ADMINISTRATION");
		
 
		RoleEntity roleAdmin = createRole(Roles.ROLE_ADMIN.name(),
				Arrays.asList( a, b, c, d, e, f, g, h, i));
 
		if (roleAdmin == null) return;
 
		UserEntity adminUser = new UserEntity(); 
		adminUser.setFirstName("Nehemias");
		adminUser.setMiddleName("Cajurao"); 
		adminUser.setLastName("Belong");
		adminUser.setSuffixName("Jr");
		adminUser.setFullName(utility.generateFullName("Nehemias", "Cajurao", "Belong", "Jr"));
		adminUser.setEmail("nehemiasbelong@gmail.com");
		adminUser.setEmailVerificationStatus(true);
		adminUser.setUserId(utility.generateUserId(10));
		adminUser.setEncryptedPassword(encoder.encode("password123"));
		adminUser.setRoles(Arrays.asList(roleAdmin)); userRepository.save(adminUser);
	}

	@Transactional 
	private AuthorityEntity createAuthority(String name) {
		AuthorityEntity authority = authorityRepository.findByName(name);
		if(authority == null) { 
			authority = new AuthorityEntity();
			authority.setName(name); 
			authorityRepository.save(authority); 
		} 
		return authority; 
	}

	@SuppressWarnings("null") 
	@Transactional 
	private RoleEntity createRole(String name, Collection<AuthorityEntity> authorities) { 
		RoleEntity resultEntity = new RoleEntity();
		RoleEntity role = roleRepository.findByName(name); 
		if (role == null) { 
			role = new RoleEntity(); 
			role.setName(name);
			role.setAuthorities(authorities); 
			resultEntity = roleRepository.save(role); 
		}
		else { 
			for (AuthorityEntity auth : authorities) { 
				if(!role.getAuthorities().contains(auth)) { 
					role.getAuthorities().add(auth); 
				}
			} 
			resultEntity = roleRepository.save(role);
		}
		return resultEntity; 
	}
 
 } ///****/
