package sys.app.ptm.tool;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.WeekFields;
import java.util.Locale;

import org.springframework.stereotype.Component;

@Component
public class ThisLocalizedWeek {

	// Try and always specify the time zone you're working with
	private ZoneId TZ = ZoneId.of("Asia/Manila");
	private TemporalField fieldUS = WeekFields.of(Locale.US).dayOfWeek();
	private DayOfWeek firstDayOfWeek;
	private DayOfWeek lastDayOfWeek;
	private LocalDate secondDayOfWeek;
	private DayOfWeek thirdDayOfWeek;
	private DayOfWeek fourthDayOfWeek;
	private DayOfWeek fifthDayOfWeek;
	private DayOfWeek sixthDayOfWeek;

	

	public LocalDate getFirstDay() {
		return LocalDate.now(TZ).with(fieldUS,1);
	}

	public LocalDate getLastDay() {
		return LocalDate.now(TZ).with(TemporalAdjusters.nextOrSame(this.lastDayOfWeek));
	}

	public LocalDate getSecondDay() {
		return LocalDate.now(TZ).with(TemporalAdjusters.nextOrSame(this.secondDayOfWeek));
	}

	public LocalDate getThirdDay() {
		return LocalDate.now(TZ).with(TemporalAdjusters.nextOrSame(this.thirdDayOfWeek));
	}

	public LocalDate getFourthDay() {
		return LocalDate.now(TZ).with(TemporalAdjusters.nextOrSame(this.fourthDayOfWeek));
	}

	public LocalDate getFifthDay() {
		return LocalDate.now(TZ).with(TemporalAdjusters.nextOrSame(this.fifthDayOfWeek));
	}

	public LocalDate getSixthDay() {
		return LocalDate.now(TZ).with(TemporalAdjusters.nextOrSame(this.sixthDayOfWeek));
	}

}